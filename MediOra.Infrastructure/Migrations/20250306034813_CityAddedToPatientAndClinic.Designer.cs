// <auto-generated />
using System;
using MediOra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediOra.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250306034813_CityAddedToPatientAndClinic")]
    partial class CityAddedToPatientAndClinic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Appointment's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Appointment's Date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasComment("Doctor's Identifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Appointment's Notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasComment("Patient's Identifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Appointment's Status");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", t =>
                        {
                            t.HasComment("Appointment's information");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2025, 3, 7, 3, 48, 11, 797, DateTimeKind.Utc).AddTicks(8067),
                            DoctorId = 1,
                            Notes = "Regular checkup",
                            PatientId = 1,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2025, 3, 8, 3, 48, 11, 797, DateTimeKind.Utc).AddTicks(8076),
                            DoctorId = 2,
                            Notes = "Neurology consultation",
                            PatientId = 2,
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2025, 3, 9, 3, 48, 11, 797, DateTimeKind.Utc).AddTicks(8077),
                            DoctorId = 3,
                            Notes = "Pediatrics follow-up",
                            PatientId = 3,
                            Status = "Scheduled"
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the clinic.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Address of the clinic.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Clinic's City");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Clinic's Description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Clinic's Profile Image URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the clinic.");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Phone number of the clinic.");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasComment("Working hours of the clinic.");

                    b.HasKey("Id");

                    b.ToTable("Clinics", t =>
                        {
                            t.HasComment("Table storing information about medical clinics.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "111 Downtown St",
                            City = "",
                            ImageUrl = "/images/Clinics/Clinics_DowntownClinic.jpg",
                            Name = "Downtown Clinic",
                            PhoneNumber = "999-999-9999",
                            WorkingHours = "9 - 19"
                        },
                        new
                        {
                            Id = 2,
                            Address = "222 Uptown Ave",
                            City = "",
                            ImageUrl = "/images/Clinics/Clinics_UptownClinic.jpg",
                            Name = "Uptown Clinic",
                            PhoneNumber = "888-888-8888",
                            WorkingHours = "8 - 18"
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Doctor's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Doctor's Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor's City");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("Doctor's Description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor's Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Doctor's First Name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Doctor's Profile Image URL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Doctor's Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Doctor's Phone number");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int")
                        .HasComment("Doctor's Specialty Identifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Doctors", t =>
                        {
                            t.HasComment("Doctor's information");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            City = "New York",
                            Email = "johndoe@mail.com",
                            FirstName = "John",
                            ImageUrl = "/images/Doctors/Doctor_JohnDoe.jpg",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            SpecialtyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            City = "Los Angeles",
                            Email = "janesmith@mail.com",
                            FirstName = "Jane",
                            ImageUrl = "/images/doctors/Doctor_JaneSmith.jpg",
                            LastName = "Smith",
                            PhoneNumber = "987-654-3210",
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St",
                            City = "Chicago",
                            Email = "emmabrown@mail.com",
                            FirstName = "Emma",
                            ImageUrl = "/images/doctors/Doctor_EmmaBrown.jpg",
                            LastName = "Brown",
                            PhoneNumber = "555-555-5555",
                            SpecialtyId = 3
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the feedback.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the associated appointment.");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Comments provided by the patient.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the feedback was created.");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the doctor who received the feedback.");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the feedback is anonymous.");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the patient providing the feedback.");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Rating provided by the patient MinRange-MaxRange).");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks", t =>
                        {
                            t.HasComment("Table storing feedback from patients about appointments.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            Comments = "Great service!",
                            CreatedAt = new DateTime(2025, 3, 6, 3, 48, 12, 129, DateTimeKind.Utc).AddTicks(5499),
                            DoctorId = 1,
                            IsAnonymous = false,
                            PatientId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            Comments = "Very professional.",
                            CreatedAt = new DateTime(2025, 3, 6, 3, 48, 12, 129, DateTimeKind.Utc).AddTicks(5501),
                            DoctorId = 2,
                            IsAnonymous = false,
                            PatientId = 2,
                            Rating = 4
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Mappings.DoctorClinic", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the doctor.");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the clinic.");

                    b.HasKey("DoctorId", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.ToTable("DoctorClinic", t =>
                        {
                            t.HasComment("Mapping table for doctors and clinics.");
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Mappings.DoctorFeedback", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the doctor.");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the feedback.");

                    b.HasKey("DoctorId", "FeedbackId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("DoctorFeedback", t =>
                        {
                            t.HasComment("Mapping table for doctors and feedback.");
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Mappings.PatientNotification", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the patient.");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the notification.");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date the notification was sent.");

                    b.HasKey("PatientId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("PatientNotification", t =>
                        {
                            t.HasComment("Mapping table for patients and notifications.");
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the medical record.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Medical condition or diagnosis of the patient.");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the diagnosis was recorded.");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Additional notes about the patient's condition.");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the patient.");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords", t =>
                        {
                            t.HasComment("Table storing medical records for patients.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Condition = "Hypertension",
                            DiagnosisDate = new DateTime(2023, 3, 6, 3, 48, 12, 239, DateTimeKind.Utc).AddTicks(6484),
                            Notes = "Monitor blood pressure regularly.",
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Condition = "Migraine",
                            DiagnosisDate = new DateTime(2024, 3, 6, 3, 48, 12, 239, DateTimeKind.Utc).AddTicks(6496),
                            Notes = "Prescribed medication for migraines.",
                            PatientId = 2
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the notification.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the notification was sent.");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether the notification has been read.");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Message content of the notification.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user receiving the notification.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasComment("Table storing notifications for users about upcoming events or reminders.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2025, 3, 6, 3, 48, 12, 347, DateTimeKind.Utc).AddTicks(5144),
                            IsRead = false,
                            Message = "Your upcoming appointment is tomorrow.",
                            UserId = "patient-user-id"
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2025, 3, 6, 3, 48, 12, 347, DateTimeKind.Utc).AddTicks(5147),
                            IsRead = false,
                            Message = "System maintenance scheduled.",
                            UserId = "admin-user-id"
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Patient's Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Patient's Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient's City");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Patient's Date Of Birth");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient's Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Patient's First Name");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Patient's Profile Image URL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Patient's Last Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Patient's Phone number");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasComment("Patient's information");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "321 Pine St",
                            City = "",
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alicejohnson@mail.com",
                            FirstName = "Alice",
                            ImageUrl = "/images/Patients/Patient_AliceJohnson.jpg",
                            LastName = "Johnson",
                            PhoneNumber = "111-111-1111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "654 Maple St",
                            City = "",
                            DateOfBirth = new DateTime(1985, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bobwilliams@mail.com",
                            FirstName = "Bob",
                            ImageUrl = "/images/Patients/Patient_BobWilliams.jpg",
                            LastName = "Williams",
                            PhoneNumber = "222-222-2222"
                        },
                        new
                        {
                            Id = 3,
                            Address = "987 Cedar St",
                            City = "",
                            DateOfBirth = new DateTime(2000, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charliedavis@mail.com",
                            FirstName = "Charlie",
                            ImageUrl = "/images/Patients/Patient_CharlieDavis.jpg",
                            LastName = "Davis",
                            PhoneNumber = "333-333-3333"
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the schedule.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int")
                        .HasComment("Day of the week for the schedule.");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the doctor.");

                    b.Property<TimeSpan>("EndHour")
                        .HasColumnType("time")
                        .HasComment("Ending hour of the schedule.");

                    b.Property<TimeSpan>("StartHour")
                        .HasColumnType("time")
                        .HasComment("Starting hour of the schedule.");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules", t =>
                        {
                            t.HasComment("Represents the schedule of a doctor.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOfWeek = 1,
                            DoctorId = 1,
                            EndHour = new TimeSpan(0, 17, 0, 0, 0),
                            StartHour = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayOfWeek = 2,
                            DoctorId = 2,
                            EndHour = new TimeSpan(0, 18, 0, 0, 0),
                            StartHour = new TimeSpan(0, 10, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier of the specialty.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the medical specialty.");

                    b.HasKey("Id");

                    b.ToTable("Specialties", t =>
                        {
                            t.HasComment("Represents a medical specialty.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Orthopedics & Traumatology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ophthalmology"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Psychiatry"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Obstetrics & Gynecology"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Urology"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Endocrinology"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gastroenterology"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hematology"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Infectious Diseases"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Nephrology"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Pulmonology"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Rheumatology"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Allergology & Immunology"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Anesthesiology & Intensive Care"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Dentistry"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Physical Therapy & Rehabilitation"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Plastic & Reconstructive Surgery"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Vascular Surgery"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Neurosurgery"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Otorhinolaryngology (ENT)"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Emergency Medicine"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Family Medicine"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Sports Medicine"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Geriatrics"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Nutrition & Dietetics"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Radiology & Imaging"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Nuclear Medicine"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Medical Genetics"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Clinical Psychology"
                        },
                        new
                        {
                            Id = 35,
                            Name = "General Practice"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38cb2d4a-f06b-4d55-b0b5-c7394610ad63",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDfMBt1CFg/21STJI/JRWGZ7wawRLKdI4BhqfLTgo/VnLtvoUgetPWFN5HzzCOM2SA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e10532d7-5897-424d-985d-e160ca862857",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = "patient-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2d995e2-9065-4a4e-b306-61868ca17d3c",
                            Email = "patient@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@MAIL.COM",
                            NormalizedUserName = "PATIENT@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZ4Pj+P4qvOB76Y4BKwVmFwyVsPxno805gdR91res0/FyiWuP60/SEY8dKofDVSig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae93efa9-6306-4c52-9809-ada2e0ee7966",
                            TwoFactorEnabled = false,
                            UserName = "patient@mail.com"
                        },
                        new
                        {
                            Id = "doctor1-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8aa651c0-06e6-4a62-b967-20cf0b096e43",
                            Email = "doctor1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR1@MAIL.COM",
                            NormalizedUserName = "DOCTOR1@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1JV5pzcdhZn1KoGx9hYvNBap69OEzX9EweiqejFrzi6JjppmZEPEZJ0NBxrlyPhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d0e796e-6dd4-4e14-a17d-4ae27b963623",
                            TwoFactorEnabled = false,
                            UserName = "doctor1@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediOra.Infrastructure.Data.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Feedback", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("MediOra.Infrastructure.Data.Models.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MediOra.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediOra.Infrastructure.Data.Models.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Mappings.DoctorClinic", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Clinic", "Clinic")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediOra.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Mappings.DoctorFeedback", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediOra.Infrastructure.Data.Models.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Mappings.PatientNotification", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediOra.Infrastructure.Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.MedicalRecord", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Patient", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Doctor", null)
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Schedule", b =>
                {
                    b.HasOne("MediOra.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Clinic", b =>
                {
                    b.Navigation("DoctorClinics");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorClinics");

                    b.Navigation("Patients");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("MediOra.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
